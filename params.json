{"name":"Twitter Data","tagline":"A simple, open proposal for embedding data in Twitter messages","body":"Originally published May 12, 2009. This is version 0.3, published May 19, 2009.\r\n\r\nIntroduction\r\n------------\r\n\r\n> *In 140 chars: Twitter Data lets people embed bits of data in their\r\n> tweets so that computers can read the data and do cool stuff\r\n> \\#twitterdata*\r\n\r\nTwitter Data is a simple, open, semi-structured format for embedding\r\nmachine-readable, yet human-friendly, data in\r\n[Twitter](http://twitter.com) messages. This data can then be\r\ntransmitted, received, and interpreted in real time by powerful new\r\nkinds of applications built on the Twitter platform. Here is an example\r\nTwitter Data message:\r\n\r\n````\r\nI love the \\#twitterdata proposal! $vote +1\r\n````\r\n\r\nThe part with the dollar sign, `$vote +1`, is a piece of data embedded\r\nusing the Twitter Data format.\r\n\r\nWhen an application knows how to read this data, it can then display it\r\nto users or send it to other applications to make Twitter an even more\r\ninteresting and useful platform. You can see an example of this in the\r\nvoting widget over there in the right-hand column of this page.\r\n\r\n### How it works\r\n\r\n1.  A user (or her Twitter client) sends a Twitter message that includes\r\n    embedded Twitter Data, like `Watch out, just saw a #police car near  San Francisco Airport $lat 37.612804 $long -122.381687`\r\n2.  This message is distributed like any other Twitter message to the\r\n    user's followers\r\n3.  The followers' Twitter clients listen for messages with embedded\r\n    Twitter Data and extract data they understand. This data is\r\n    presented to users, recorded, or otherwise consumed in some useful\r\n    way. In this example, the Twitter client could show a map with a pin\r\n    for the police car's location.\r\n4.  Data mining applications extract Twitter Data from messages using\r\n    the Twitter platform (for example, using search or the public\r\n    timeline) and then process it, present it, or otherwise consume it\r\n    in some way useful to humans or other applications. In this example,\r\n    it would be possible to build a map showing police car locations in\r\n    real time based on user reports via Twitter.\r\n\r\n### Why?\r\n\r\nTwitter is an amazing, constantly changing stream of information, most\r\nof which is unstructured, with useful data locked up in the\r\nnear-infinite complexity of human language. The inability to easily\r\nextract this data limits the usefulness of that information,\r\nparticularly for applications that want to interact with humans on\r\nTwitter in interesting ways. For example, use cases such as attaching\r\nmetadata about message senders or distributing shared data within a\r\nsocial graph are difficult to solve without using some structured data\r\nformat.\r\n\r\nWhen data can be formally embedded in Twitter messages, we see enormous\r\nnew opportunities for data mining, social data distribution, and\r\nintelligent application behavior unlimited by lack of natural language\r\nprocessing technology. Best of all, the richness of this data is\r\navailable to everyone, and can be sent and consumed by both humans and\r\nmachines.\r\n\r\n### Goals\r\n\r\nBy proposing an embedded data format, our goal is not to turn Twitter\r\ninto a mere transport layer for machine-readable data, but instead to\r\nallow semi-structured data to be mixed fluidly with normal message\r\ncontent. To these ends, we have chosen a syntax that conceptually\r\nresembles the use of Twitter hashtags, albeit with different syntax and\r\nsemantics, and which allows humans to interact with data in a reasonably\r\nnormal way.\r\n\r\nWe are publishing this proposal to invite peer review, spark useful\r\ndebate, and gather consensus. In short, we think this is a good idea and\r\nhope you will too, but we need your help to vet it.\r\n\r\n### Terms\r\n\r\nApplications\r\n:   Programs that send and/or receive messages that may contain Twitter\r\n    Data tuples\r\nMessage frame\r\n:   A single message containing Twitter Data tuples, normally with a max\r\n    length of 140 characters on Twitter. Message frames may be embedded\r\n    in other messages frames, for example in the case of retweeting.\r\nTuple\r\n:   A single pair of name and value used to send a single datum\r\nTwitter Data\r\n:   A distinct dimension of machine-readable data that can be embedded\r\n    in Twitter or Twitter-like messages\r\n\r\nSyntax\r\n------\r\n\r\n### Tuples\r\n\r\nData is structured as simple name-value pairs of strings, called\r\n*tuples*, embedded in normal Twitter messages. The simplest form is the\r\nfollowing:\r\n\r\n````\r\n$name1 value1\r\n````\r\n\r\nThis example shows a single tuple, with the name \"name1\" and the value\r\n\"value1\".\r\n\r\nNames and values are separated by one or more spaces. These spaces are\r\nnot considered part of the name or the value. Values start with the\r\nfirst non-space character following the termination of the name with a\r\nspace. Therefore, this example is equivalent to the one above despite\r\nthe number of spaces between name and value:\r\n\r\n````\r\n$name1        value1\r\n````\r\n\r\nSpaces within values are literal and unescaped:\r\n\r\n````\r\n$name1 some long value\r\n````\r\n\r\nMultiple tuples can appear in a single message frame, where the value of\r\nthe previous tuple is terminated by the start of a new tuple name\r\npreceeded by a space:\r\n\r\n````\r\n$name1 value1 $name2 value2\r\n````\r\n\r\nIf a tuple appears at the end of the message, then the value terminator\r\nis implicit. If the tuple is embedded in the message with non-data text,\r\nthe last tuple's value before the text begins must be terminated by a\r\ndollar-sign delimiter following the last character of the last value,\r\nimmediately followed by a space:\r\n\r\n````\r\nsome text $name1 value1 $name2 value2$ some more text\r\n````\r\n\r\nMultiple groups of tuples are allowed, as long as they are each properly\r\nterminated:\r\n\r\n````\r\nsome text $name1 value1 $name2 value2$ some more text $name3 value3\r\n````\r\n\r\nIf a tuple value contains the literal dollar-sign character (\"\\$\"), the\r\nliteral character must be escaped by doubling the character to \"\\$\\$\".\r\nIf non-data message text contains the literal dollar-sign character, we\r\nadvise doubling the value where it may otherwise be confused with the\r\ntuple syntax.\r\n\r\n#### More syntax details\r\n\r\nTuple names begin with a dollar sign (\"`$`\") delimiter and are terminated\r\nby the first space or non-alphanumeric character with the exceptions of\r\nunderscore (\"`_`\") or as noted below. Tuple names must begin with an\r\nASCII letter or underscore, and by convention, use camel case with the\r\nfirst letter lowercased. This convention helps preclude namespace\r\ncollision with existing use of the dollar sign in normal messages when\r\nwriting either dollar amounts or stock symbols. [TBD: How does character\r\nencoding in Twitter affect this? Is it reasonable for UTF-8 strings to\r\nbe used as tuple names?]\r\n\r\nTuple values are terminated by the start of a new name delimiter; a\r\nsingle, value-trailing delimiter; or the end of the message frame.\r\n\r\nNote, tuples without a value are considered invalid and should be\r\nexcluded from processing by applications. Specifically, there is no\r\nformal representation of tuples with null values; if a tuple is present,\r\nit must have a value, however trivial. Our reasoning for this\r\nrestriction is twofold: First, that such usage overlaps with the\r\nsemantics of Twitter hashtags, and second, that it limits the amount of\r\naccidental interpretation by applications of non-Twitter Data message\r\ncontent that uses the dollar sign notation in other ways\r\n\r\nIf leading spaces are required in a value, the value should typically be\r\nquoted (with single or double quotes), or the space characters would be\r\nescaped, for example with URL encoding (\"%20\"). However, quotes or other\r\nencoded forms are considered part of the tuple value and interpretation\r\nof them in relation to the value rests with the receiving applications.\r\nThis proposal does not specify a standard mechanism for quoting or\r\nencoding values. [TBD: Why not?]\r\n\r\n#### Tuple recency\r\n\r\nThe same tuple name may appear more than once in the same message frame.\r\nIf each tuple applies to a separate subject, then normal semantics\r\napply. If all tuples apply to the same subject, then the rightmost tuple\r\nshould be considered the more recent. Note that recency does not\r\nnecessarily imply that a tuple value is exclusive with a prior tuple\r\nvalue. Depending on the semantics of the tuple and/or subject, multiple\r\ntuple values over time may be additive.\r\n\r\nFor example, in the following message frame:\r\n\r\n````\r\n@toddfast $likes movies $likes Twitter\r\n````\r\n\r\nit seems obvious that the `$likes` tuples should be non-exclusive.\r\nCompare to these examples, in which tuples should be exclusive because\r\nthey describe momentary states of the subject:\r\n\r\n````\r\nI love #twitterdata $vote +1$ but now I hate it $vote -1\r\n````\r\n\r\n````\r\n@toddfast driving $mph 65$, oops just hit a wall $mph 0\r\n````\r\n\r\nThe interpretation and semantics of any tuple values that appear in a\r\nmessage frame or over time in a message stream is beyond the scope of\r\nthis proposal. We expect the semantics of commonly-defined tuples with\r\nregard to exclusivity of multiple values to be addressed by community\r\nconvention.\r\n\r\n#### Reserved tuple names\r\n\r\nWe expect tuple names to be used by the community following\r\ncommunity-developed conventions. However, this proposal does reserve all\r\nun-namespaced tuple names of a single letter or underscore.\r\nSpecifically, the following un-namespaced tuple names are reserved and\r\nshould not be used by applications:\r\n\r\n````\r\na, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, \r\ny, z, _, foo, bar\r\n````\r\n\r\n#### Comments on syntax\r\n\r\nSome may question the use of the dollar-sign (\"\\$\") as a tuple\r\ndelimiter. One main driver for this choice is that there is a very\r\nlimited set of non-alphanumeric characters that are compatible with\r\nTwitter's search engine. Namely, Twitter search treats most\r\nnon-alphanumeric characters in a special way that limits their\r\nusefulness in conjunction with this proposal. Note, this could change if\r\nTwitter works with the community to formalize use of an alternate\r\ncharacter.\r\n\r\nHere are some of our justifications for using \"$\":\r\n\r\n-   Similar syntax to PHP and other scripting languages\r\n-   The use of the character in this way seems to be relatively unique\r\n    on Twitter and thus is available for use for encoding data\r\n-   Compatible with Twitter search, making it possible to use for\r\n    partial searches with other characters in conjunction.\r\n-   It is human readable and doesn't interfere too much with normal\r\n    readability so that Twitter Data message frames can be useful to\r\n    humans as well as machines.\r\n\r\nThere are some open issues with this choice, however:\r\n\r\n-   The dollar-sign notation is used by PHP programmers to express short\r\n    code snippets on Twitter. The namespace collision may or may not be\r\n    an issue over the long term. As a precaution, we have reserved the\r\n    \\$foo and \\$bar tuple names because they commonly appear in code\r\n    snippets.\r\n-   The dollar-sign notation is also used by Twitter users discussing\r\n    stock symbols, for example \\$MSFT, \\$ORCL, \\$JAVA. Usually the stock\r\n    symbols are in upper case, which is part of the justification for\r\n    Twitter Data to default to lowercase tuple names.\r\n\r\n### Simple namespaces\r\n\r\nNamespacing is a key capability that allows Twitter Data tuples to be\r\ninterpreted with strict, well-defined semantics. The namespace syntax is\r\nthe following:\r\n\r\n````\r\n$namespace>name value\r\n````\r\n\r\nNamespaces comprise the portion of the tuple name following the name\r\ndelimiter \"$\" and preceding the greater-than symbol (\">\") symbol. They\r\nfollow all syntax rules as described above, and thus may not contain\r\nspaces or other non-alphanumeric characters. Only one namespace may\r\nappear in a tuple name.\r\n\r\nOur intent is that the presence of namespaces allow the community to\r\ndefine more precise semantics for interpretation of tuples. It is beyond\r\nthe scope of this proposal to define the semantics or content of any\r\nparticular namespaces at this time.\r\n\r\nHowever, this proposal does reserve all namespaces of a single letter or\r\nunderscore, in addition to the \"td\" namespace. Specifically, the\r\nfollowing namespaces are reserved and should not be used by\r\napplications:\r\n\r\n````\r\na, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, \r\ny, z, _, td\r\n````\r\n\r\n### Message subjects\r\n\r\nIn many cases, it is useful for data in Twitter Data messages to be\r\ninterpreted relative to a general topic, or *subject*. A subject is a\r\nperson, object, message stream, or other concrete or abstract entity to\r\nwhich one or more tuples in the message frame apply. As explained below,\r\nsubjects may be implicitly determined by applications, or explicitly\r\nspecified in the message.\r\n\r\nMore than one subject may appear in a message frame, but any given tuple\r\nis governed by only a single subject, called its *dominant subject*. By\r\nconvention, tuples are interpreted within the context of their dominant\r\nsubject, if present. A dominant subject is the subject that is closest\r\nto a tuple:\r\n\r\n> *The nearest subject identifier to the left of a tuple and outside a tuple value is the dominant subject for that tuple*.\r\n\r\nwhere a subject identifier is either implicit or explicit as described\r\nin the sections below.\r\n\r\nIn message frames without a determinable subject, the subject is\r\nconsidered undefined, and tuples may be freely interpreted by any\r\napplication that purports to understand them. However, there are no\r\nsemantic guarantees in this case, and misinterpretation is possible.\r\nApplications should therefore be robust in handling and filtering\r\nunexpected tuple values (which is true even in the case where a subject\r\nis present).\r\n\r\nWhile tuples in message frames without a subject are not by definition\r\nmeant to apply to the message sender, in practice they often do. We\r\nunderstand that this is a very natural way to interpret subjectless\r\ntuples, but until further feedback is available from the community we\r\nprefer to leave this to applications' interpretation.\r\n\r\n#### Implicit subjects\r\n\r\nSubjects are often implicit in a message, particularly in messages sent\r\nby humans. The rule for determining the implicit subject of a message\r\nframe is straightforward:\r\n\r\n> *The nearest implicit subject identifier to the left of a tuple and\r\n> outside a tuple value is the dominant subject for that tuple*.\r\n\r\nwhere an implicit subject identifier is one of the following:\r\n\r\n-   A hashtag, for example, \\#twitterdata\r\n-   A person tag, for example, @toddfast\r\n\r\nTherefore, in the following example, the implicit subject is\r\n`#twitterdata`:\r\n\r\n````\r\nHey @toddfast, I like the latest #twitterdata proposal $vote +1\r\n````\r\n\r\nImplicit subjects make it very easy for humans to embed data in messages\r\nwithout getting bogged down in hard-to-remember and verbose formalisms.\r\nFurthermore, it makes messages with embedded data easier to read for\r\nhumans, and reduces the number of characters in a message frame.\r\n\r\n#### Explicit subjects\r\n\r\nIn some cases, it reduces ambiguity or is clearer to explicitly specify\r\na subject. Usually, it will be applications sending messages with\r\nembedded data that will want to explicitly specify a subject in order to\r\ndefine a formal communication channel.\r\n\r\nSubjects are specified using a tuple of the following form, comprising\r\nthe reserved tuple name \"\\$s\" and a URI value, called the *subject\r\nname*:\r\n\r\n````\r\n$s subject_name\r\n````\r\n\r\nThe `subject_name` may be either a URI as defined in RFC 3986, a Twitter\r\nperson tag, or a Twitter hashtag. We strongly discourage use of other\r\nclasses of values.\r\n\r\nExplicit subjects follow the same dominant subject rule as implicit\r\nsubjects:\r\n\r\n> *The nearest explicit subject identifier to the left of a tuple and outside a tuple value is the dominant subject for that tuple*.\r\n\r\nApplications that wish to partition their message streams from other\r\napplications are strongly encouraged to use subject tuples with URI\r\nvalues, such as shortened URLs (for example, shortened via bit.ly), that\r\nare unlikely to collide with other casual subject name use. Such URLs\r\nalso conveniently allow the application to link to itself in the\r\nmessages it sends.\r\n\r\nBy convention, messages that start with the reserved subject tuple\r\n(\"$s\") may be considered by applications as intended for machine-only\r\nconsumption. Applications that present Twitter feeds to users may elect\r\nto filter these messages from presentation.\r\n\r\nIt is beyond the scope of this proposal to define conventions for common\r\nsubjects, such as @ tags as a class of subjects, or specific hashtags.\r\nWe will leave this task to the community.\r\n\r\nNote, the use of subjects potentially reduces the amount of namespacing,\r\nthus saving valuable characters, and allows messages to be filtered more\r\nefficiently by message recipients. In this sense, subjects might be\r\nconsidered a default namespace for all tuples within a message frame,\r\nthough this is not strictly true. Furthermore, subjects may be appealing\r\nbecause they are more unique and terse compared to simple namespaces\r\nbecause the space of subject values is syntactically larger than that of\r\nsimple namespaces. However, namespaces and subjects are completely\r\ncompatible and will generally be used in conjunction with one another.\r\n\r\nOther Considerations\r\n--------------------\r\n\r\n### Retweeting\r\n\r\nSpecial consideration is necessary when considering the semantics of\r\ndata embedded in retweeted messages. Ideally, retweeting should not\r\nchange the interpretation of retweeted message frames. The purpose of\r\nretweeting is to propogate a message through a different graph of\r\nreceivers, and so the central question is whether that instance of a\r\nmessage should be considered separate from the original instance, and\r\nthus whether it should be interpreted independently from the original.\r\nWe will discuss this topic more thoroughly based on use cases for\r\nretweeted data in a future version of this proposal.\r\n\r\nThe determination of a subject for a message is somewhat more subtle in\r\nthe case of retweeted messages. For messages that either implicitly or\r\nexplicitly specify a subject, retweeting has no effect on the\r\ninterpretation of the message frame. However, in the case of subjectless\r\nmessages, the act of retweeting normally inserts a subject with the\r\ninclusion of a person tag of the original author.\r\n\r\nAs described above, a subjectless message frame does not automatically\r\nor necessarily apply to the message sender. We understand that this is\r\nan incongruity that may be addressed by either special casing the\r\nprocessing of retweeted messages, or by simply acknowledging that\r\nsubjectless messages probably apply to message senders and thus the\r\nsemantics of subject determination are neatly compatible with\r\nretweeting. We would appreciate community feedback before making a final\r\nproposal.\r\n\r\n### Role and function of hashtags\r\n\r\nUse of hashtags in Twitter Data is largely unchanged. If hashtags appear\r\nin tuple values, they may be interepreted as normal hashtags in the\r\nnormal way by humans and user agents, and have undefined semantics in\r\nterms of this proposal. By contrast, hashtags may not appear as part of\r\ntuple names.\r\n\r\nHashtags will often be use as subjects of messages, which is\r\nsemantically consistent with their intended purpose.\r\n\r\n### Binary data\r\n\r\nThis proposal is not suited to use cases that require streaming, binary\r\ndata, or large amounts of data to be exchanged. In particular, rate\r\nlimits of messages on Twitter combined with the limited message size\r\nmake Twitter Data unsuitable for transferring significant amounts of\r\ndata at high speeds.\r\n\r\nIn general, we discourage applications from using binary data with\r\nTwitter Data, largely because it harms interoperability and is\r\ninconvenient for users using Twitter to send human-readable messages.\r\nHowever, binary data is unavoidable in some cases, and may be less ugly\r\nthan the equivalent human-readable serialization. If binary data is\r\nsent, it should be Base64 encoded.\r\n\r\n### Data size\r\n\r\nA single tuple may not span more than one message frame of 140\r\ncharacters. However, multiple tuples may be included in a single message\r\nframe, with the requirement that all included tuples fit collectively\r\nwithin the message frame size limit (on Twitter, 140 characters). Note,\r\nwe may introduce a means of frame spanning in a later proposal.\r\n\r\nThis specification does not specify a way to determine if tuple values\r\nare truncated at the end of a message frame because the requirement of\r\nterminating the set of tuples with a delimiter is optional. Applications\r\nthat receive tuples must be aware of this restriction and ensure that\r\nthey check for invalid values. Applications that send tuples should\r\ninstead attempt to send additional message frames with tuples that would\r\notherwise be truncated.\r\n\r\n### Atomicity and transactional semantics\r\n\r\nThe usefulness and novelty of Twitter Data rests on the ability for\r\nmultiple messages containing varying data to be delivered over time, in\r\nwhat we call *message streams*. Message streams are a virtual\r\nconsolidation of multiple messages around specific criteria, for example\r\na person, subject, or a search query. Note that messages may appear in\r\nmultiple message streams, in differing order.\r\n\r\nThe order of appearance of tuples in a message stream is undefined with\r\nrespect to this proposal, though it is most common for them to be\r\nordered in time, with the latest message at the head of the stream as we\r\nnominally see in Twitter.\r\n\r\nData in message frames are intended to be non-atomic and\r\nnon-transactional. That is, there is no mechanism to determine whether a\r\ncollection of tuples should be considered one atomic group. Said another\r\nway, there is no mechanism to specify the semantics of groups of tuples,\r\nparticularly across message frames.\r\n\r\nInstead, applications should typically consider the last tuple of a\r\ngiven name as containing the most recent data with respect to a given\r\nmessage stream.\r\n\r\nThis looseness allows data to be streamed more efficiently through\r\nTwitter's low-bandwidth messaging platform. Duplicate or non-relevant\r\nvalues need not be respecified in order to help applications determine\r\nthe semantics of collections of tuples.\r\n\r\nNote, because of the lack of restriction on tuple delivery order,\r\napplications sending message frames are free to optimize sending of\r\nmultiple tuples by arranging them to fit most efficiently across the\r\nfewest number of message frames without truncation.\r\n\r\n### Semantic web\r\n\r\nWe have designed Twitter Data with an eye to layering additional\r\nsemantic structures on top. We will discuss these possibilities in a\r\nlater version of this proposal.\r\n\r\n### Applicability\r\n\r\nWhile its name would seem to indicate a focus only on Twitter, Twitter\r\nData may also be used on similar messaging services, over instant\r\nmessaging (particularly in the case of multicast conferences), email,\r\nSMS, or any other point-to-point, broadcast, or multicast messaging\r\ninfrastructure, with or without message size restrictions.\r\n\r\nBecause of the constraints of Twitter message sizes, Twitter Data is\r\nalso intended to be terse and compact without sacrificing human\r\nreadability, and to avoid overwhelming normal Twitter streams with ugly,\r\nencoded data intended only for machines. Because of its terseness, it is\r\nuseful over low-bandwidth, high-latency, and mobile networks.\r\n\r\nFurthermore, because of the human-friendly syntax, Twitter Data is\r\nsuitable to be read, injected, and debugged by humans, in the same vein\r\nas HTTP and JSON, making it a convenient, robust, and flexible data\r\nrepresentation format.\r\n\r\nExamples\r\n-------------\r\n\r\n````\r\nCruising down 101 near SFO $mph 95 $lat 37.612804 $long -122.381687\r\n````\r\n````\r\nI love the #twitterdata proposal! $vote +1\r\n````\r\n````\r\nCall me $phone 123-456-7890\r\n````\r\n````\r\nCheap #gas! $lat 37.323144 $long -121.944423 $price 1.99\r\n````\r\n````\r\n#wmodata $id DW1428 $temp 69F $wangle 232 $wspeed 4.0mph $rh 50% \r\n$dew 49F $press 1015.2mb\r\n````\r\n````\r\nSaw a $aero>man MIG $in walmart$ would you believe it?\r\n````\r\n````\r\n@romeo $foaf>loves @juliet\r\n````\r\n````\r\n$s urn:game123 $move a1b2\r\n````\r\n````\r\n$s urn:roulette123 $bet $$10 $num 5\r\n````\r\n\r\nFAQ\r\n---\r\n\r\n### Is this really necessary?\r\n\r\nTechnically, no. However, we do think it has value.\r\n\r\nOne of the easy criticisms to make about Twitter Data is that equivalent information should be extracted semantically, by analyzing the natural language of user tweets, instead of by users or applications injecting data manually. Ideally, this would be possible, but unfortunately it's not. The technology industry is a long way from truly useful natural language processing, and furthermore, not all types of data can be extracted in that way.\r\n\r\nUntil we have technology that's at least as smart as a human, structured data that is created, annotated, and curated by humans will always have a place. Will it have a place on Twitter? That's up to you.\r\n\r\n### Isn't it a bad idea to litter Twitter feeds with data intended for machines?\r\n\r\nMaybe. Probably. Possibly not.\r\n\r\nThere are a number of possible concerns, but the most common is probably that applications using Twitter Data will spam Twitter with hard-to-read messages and irk all of the human users.\r\n\r\nWe agree that this may be a short-term possibility. However, in our opinion, the usefulness of embedding data in Twitter messages outstrips any such concerns, and we are willing to live with any short-term discomfort because it ultimately makes Twitter far more useful to its users.\r\n\r\nWhile it may or may not be a defense, assure yourself that Twitter Data must become reasonably popular before these concerns become salient. If Twitter Data does indeed become popular, that will only be a good thing for us all, because it will mean that a new dimension in Twitter has opened up and that there is a broad usefulness in the Twitter ecosytem. At that point, we expect to see Twitter clients that account for this additional channel of data and limit its impact on us poor humans.\r\n\r\n### So you're talking about microformats for Twitter?\r\n\r\nActually, no. Don't confuse the role of Twitter Data as a means for embedding abstract data with the uses of Twitter Data to embed particular data.\r\n\r\nMicroformats are a suite of special-cased conventions for embedding specific types of common data in Web pages. It has limited or no applicability outside of this use case. The conventions it defines are built on top of a lower-level, well-defined formal syntax (HTML) which makes it possible to embed data in various, legal ways.\r\n\r\nAs a movement, Microformats are far more concerned with trying to standardize representations of common pieces of data than with standardizing how the embedding of that data should be done in the abstract. Thus, it is really a community standardization effort around various ontologies, not a technical standardization effort. The result of this focus is that we see a mishmash of different means for embedding data across the various Microformat specificiations. Microformats is specifically not about a means for an application to define its own \"microformat\"--a term that makes no sense, since something can't be a microformat without being standardized by community.\r\n\r\nLike HTML in the Microformats case, Twitter Data is one abstraction level lower, and concerned with a formal means of making abstract data embeddable in Twitter in a natural and searchable way. What that data actually represents, for example, a microsformat, JSON string, or Base64-encoded bits, is what Twitter Data enables, but not strictly what Twitter Data is about.\r\n\r\nThe purpose of Twitter Data is to enable community-driven efforts to arrive at conventions for common pieces of data that are embeddable in Twitter by formal means. In other words, \"microformats\" as community-standardized conventions are completely compatible with Twitter Data and can (and in our opinion, should) be built on top of Twitter Data.\r\n\r\n### Why not extend the hashtag syntax instead of defining a new syntax?\r\n\r\nHashtags are specially indexed by Twitter search and are terminated by any non-alphanumeric character. This limits our ability to define a namespace mechanism in Twitter Data.\r\n\r\nFurthermore, the use of hashtags is already highly conventional in the Twitter community and it is undesirable to define additional semantics for the use of the existing mechanism. We decided that converting hashtags to tuples instead of unary values was too much of a conflict with current hashtag conventions.\r\n\r\n### Why not use JSON for tuple values?\r\n\r\nWe discussed using JSON, but concluded that it is too verbose for general use, especially with a limit of 140 characters. Also, it doesn't work well with our intent to keep messages human-readable when possible. But, if you really, really want to, you can use JSON in tuple values. Just make sure to escape any embedded dollar signs (\"$\").\r\n\r\n### Why not use XML for tuple values?\r\n\r\nXML is way too verbose to fit into 140 characters for really interesting applications. Furthremore, it's very unfriendly to human readers.\r\n\r\nContributors\r\n----------------\r\n### Authors\r\n\r\n-   Todd Fast, [@toddfast](http://twitter.com/toddfast),\r\n    todd@toddfast.com,\r\n-   Jiri Kopsa, [@jirikopsa](http://twitter.com/jirikopsa),\r\n    jiri.kopsa@gmail.com\r\n\r\n### Reviewers\r\n\r\n-   Mike Gionfriddo, [@mgion](http://twitter.com/mgion)\r\n-   Ted Leung, [@twleung](http://twitter.com/twleung)\r\n-   Chun Xia, [@chunxia](http://twitter.com/chunxia)\r\n-   Hao Thai\r\n\r\n[![Creative Commons\r\nLicense](http://i.creativecommons.org/l/by-sa/3.0/88x31.png)](http://creativecommons.org/licenses/by-sa/3.0/)\r\n\r\nThis work is licensed under a [Creative Commons\r\nLicense](http://creativecommons.org/licenses/by-sa/3.0/).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}